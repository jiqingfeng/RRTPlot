window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "plotter", "modulename": "plotter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "plotter.RRTStyleConfig", "modulename": "plotter", "qualname": "RRTStyleConfig", "kind": "class", "doc": "<p>RRT\u7b97\u6cd5\u53ef\u89c6\u5316\u5de5\u5177\u7684\u5168\u5c40\u6837\u5f0f\u914d\u7f6e\u5bb9\u5668</p>\n\n<p>Attributes:\n    node (dict): \u8282\u70b9\u7ed8\u56fe\u6837\u5f0f\u914d\u7f6e\n    arrow (dict): \u7bad\u5934\u7ed8\u56fe\u6837\u5f0f\u914d\u7f6e\n    obstacle (dict): \u969c\u788d\u7269\u7ed8\u56fe\u6837\u5f0f\u914d\u7f6e\n    annotation (dict): \u6587\u5b57\u6807\u6ce8\u6837\u5f0f\u914d\u7f6e\n    angle (dict): \u89d2\u5ea6\u6807\u6ce8\u6837\u5f0f\u914d\u7f6e\n    guideline (dict): \u8f85\u52a9\u7ebf\u6837\u5f0f\u914d\u7f6e</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>style = RRTStyleConfig()\n      style.update_style('node', color='red', radius=0.3)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "plotter.RRTStyleConfig.__init__", "modulename": "plotter", "qualname": "RRTStyleConfig.__init__", "kind": "function", "doc": "<p>\u521d\u59cb\u5316RRT\u53ef\u89c6\u5316\u5143\u7d20\u7684\u9ed8\u8ba4\u6837\u5f0f\u914d\u7f6e</p>\n\n<p>Attributes:\n    node (dict): \u8282\u70b9\u6837\u5f0f\u914d\u7f6e\uff0c\u5305\u542b\uff1a\n        - color: \u8282\u70b9\u989c\u8272\uff08\u9ed8\u8ba4'black'\uff09\n        - radius: \u8282\u70b9\u534a\u5f84\uff08\u9ed8\u8ba40.2\uff09\n        - alpha: \u900f\u660e\u5ea6\uff08\u9ed8\u8ba41.0\uff09\n        - fontdict: \u6807\u7b7e\u5b57\u4f53\u914d\u7f6e\uff08\u9ed8\u8ba4Times New Roman 14\u53f7\u5b57\uff09</p>\n\n<pre><code>arrow (dict): \u7bad\u5934\u6837\u5f0f\u914d\u7f6e\uff0c\u5305\u542b\uff1a\n    - color: \u7bad\u5934\u989c\u8272\uff08\u9ed8\u8ba4'black'\uff09\n    - linewidth: \u7ebf\u5bbd\uff08\u9ed8\u8ba41.5\uff09\n    - arrowstyle: \u7bad\u5934\u6837\u5f0f\uff08\u9ed8\u8ba4'-|&gt;'\uff09\n    - mutation_scale: \u7bad\u5934\u5927\u5c0f\uff08\u9ed8\u8ba420\uff09\n    - label_offset: \u6807\u7b7e\u504f\u79fb\u91cf\uff08\u9ed8\u8ba40.2\uff09\n\nobstacle (dict): \u969c\u788d\u7269\u6837\u5f0f\u914d\u7f6e\uff0c\u5305\u542b\uff1a\n    - color: \u586b\u5145\u989c\u8272\uff08\u9ed8\u8ba4'black'\uff09\n    - alpha: \u900f\u660e\u5ea6\uff08\u9ed8\u8ba41.0\uff09\n\nannotation (dict): \u6587\u5b57\u6807\u6ce8\u6837\u5f0f\u914d\u7f6e\uff0c\u5305\u542b\uff1a\n    - color: \u6587\u5b57\u989c\u8272\uff08\u9ed8\u8ba4'black'\uff09\n    - fontsize: \u5b57\u53f7\uff08\u9ed8\u8ba416\uff09\n    - fontdict: \u5b57\u4f53\u914d\u7f6e\uff08\u9ed8\u8ba4\u52a0\u7c97Times New Roman\uff09\n\nangle (dict): \u89d2\u5ea6\u6807\u6ce8\u6837\u5f0f\u914d\u7f6e\uff0c\u5305\u542b\uff1a\n    - color: \u5706\u5f27\u989c\u8272\uff08\u9ed8\u8ba4'#e67e22'\uff09\n    - linewidth: \u7ebf\u5bbd\uff08\u9ed8\u8ba41.2\uff09\n    - arc_radius: \u5706\u5f27\u534a\u5f84\uff08\u9ed8\u8ba40.5\uff09\n    - label_offset: \u6807\u7b7e\u504f\u79fb\u7cfb\u6570\uff08\u9ed8\u8ba41.2\uff09\n\nguideline (dict): \u8f85\u52a9\u7ebf\u6837\u5f0f\u914d\u7f6e\uff0c\u5305\u542b\uff1a\n    - color: \u7ebf\u6761\u989c\u8272\uff08\u9ed8\u8ba4'#999999'\uff09\n    - linewidth: \u7ebf\u5bbd\uff08\u9ed8\u8ba45.0\uff09\n    - linestyle: \u7ebf\u578b\uff08\u9ed8\u8ba4\u865a\u7ebf'--'\uff09\n    - alpha: \u900f\u660e\u5ea6\uff08\u9ed8\u8ba40.6\uff09\n</code></pre>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>style = RRTStyleConfig()\n      print(style.node['color'])  # \u8f93\u51fa: black</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "plotter.RRTStyleConfig.node", "modulename": "plotter", "qualname": "RRTStyleConfig.node", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "plotter.RRTStyleConfig.arrow", "modulename": "plotter", "qualname": "RRTStyleConfig.arrow", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "plotter.RRTStyleConfig.obstacle", "modulename": "plotter", "qualname": "RRTStyleConfig.obstacle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "plotter.RRTStyleConfig.annotation", "modulename": "plotter", "qualname": "RRTStyleConfig.annotation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "plotter.RRTStyleConfig.angle", "modulename": "plotter", "qualname": "RRTStyleConfig.angle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "plotter.RRTStyleConfig.guideline", "modulename": "plotter", "qualname": "RRTStyleConfig.guideline", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "plotter.RRTStyleConfig.update_style", "modulename": "plotter", "qualname": "RRTStyleConfig.update_style", "kind": "function", "doc": "<p>\u52a8\u6001\u66f4\u65b0\u6307\u5b9a\u7c7b\u578b\u5143\u7d20\u7684\u7ed8\u56fe\u6837\u5f0f</p>\n\n<p>Args:\n    element_type (str): \u9700\u8981\u66f4\u65b0\u7684\u5143\u7d20\u7c7b\u578b\uff0c\u53ef\u9009\u503c\uff1a\n        'node', 'arrow', 'obstacle', 'annotation', 'angle', 'guideline'\n    **kwargs: \u9700\u8981\u66f4\u65b0\u7684\u6837\u5f0f\u952e\u503c\u5bf9</p>\n\n<p>Raises:\n    ValueError: \u5f53\u4f20\u5165\u65e0\u6548\u7684\u5143\u7d20\u7c7b\u578b\u65f6\u629b\u51fa</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>style_config = RRTStyleConfig()\n      style_config.update_style('node', color='#FF5733', alpha=0.8)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "plotter.validate_params", "modulename": "plotter", "qualname": "validate_params", "kind": "function", "doc": "<p>\u53c2\u6570\u9a8c\u8bc1\u88c5\u9970\u5668\u5de5\u5382\u51fd\u6570</p>\n\n<p>\u7528\u4e8e\u9a8c\u8bc1\u88ab\u88c5\u9970\u65b9\u6cd5\u7684\u8f93\u5165\u53c2\u6570\uff0c\u81ea\u52a8\u8fc7\u6ee4\u975e\u767d\u540d\u5355\u53c2\u6570</p>\n\n<p>Args:\n    valid_keys (list): \u5141\u8bb8\u7684\u53c2\u6570\u540d\u5217\u8868</p>\n\n<p>Returns:\n    function: \u53c2\u6570\u9a8c\u8bc1\u88c5\u9970\u5668</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>@validate_params(['color', 'linewidth'])\n      def draw_line(...):</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">valid_keys</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter", "modulename": "plotter", "qualname": "RRTPlotter", "kind": "class", "doc": "<p>RRT\u7b97\u6cd5\u53ef\u89c6\u5316\u5de5\u5177\u6838\u5fc3\u7c7b</p>\n\n<p>\u63d0\u4f9bRRT\u7b97\u6cd5\u5404\u8981\u7d20\u7684\u53ef\u89c6\u5316\u7ed8\u5236\u529f\u80fd</p>\n\n<p>Attributes:\n    fig (Figure): matplotlib\u56fe\u5f62\u5bf9\u8c61\n    ax (Axes): matplotlib\u5750\u6807\u8f74\u5bf9\u8c61\n    style (RRTStyleConfig): \u6837\u5f0f\u914d\u7f6e\u5bf9\u8c61\n    _element_counters (dict): \u5404\u7c7b\u578b\u56fe\u5f62\u5143\u7d20\u8ba1\u6570\u5668</p>\n"}, {"fullname": "plotter.RRTPlotter.__init__", "modulename": "plotter", "qualname": "RRTPlotter.__init__", "kind": "function", "doc": "<p>\u521d\u59cb\u5316RRT\u53ef\u89c6\u5316\u753b\u5e03</p>\n\n<p>Args:\n    figsize (Tuple[float, float]): \u753b\u5e03\u7269\u7406\u5c3a\u5bf8 (\u5bbd\u5ea6, \u9ad8\u5ea6)\uff0c\u5355\u4f4d\uff1a\u82f1\u5bf8\uff0c\u9ed8\u8ba4(10,8)\n    dpi (int): \u8f93\u51fa\u5206\u8fa8\u7387\uff08\u6bcf\u82f1\u5bf8\u70b9\u6570\uff09\uff0c\u9ed8\u8ba4100\n    boundary_view (bool): \u662f\u5426\u663e\u793a\u753b\u5e03\u8fb9\u754c\u6846\uff0c\u9ed8\u8ba4True\n    style_config (Optional[RRTStyleConfig]): \u81ea\u5b9a\u4e49\u6837\u5f0f\u914d\u7f6e\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5185\u7f6e\u914d\u7f6e</p>\n\n<p>Attributes:\n    fig (Figure): matplotlib\u56fe\u5f62\u5bf9\u8c61\n    ax (Axes): matplotlib\u5750\u6807\u7cfb\u5bf9\u8c61\n    style (RRTStyleConfig): \u5b9e\u9645\u751f\u6548\u7684\u6837\u5f0f\u914d\u7f6e\n    _element_counters (dict): \u5404\u7c7b\u578b\u5143\u7d20\u8ba1\u6570\u5668 {'node': 0, 'edge': 0, ...}</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>plotter = RRTPlotter(figsize=(12, 10), dpi=150, boundary_view=False)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">dpi</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">boundary_view</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">style_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">plotter</span><span class=\"o\">.</span><span class=\"n\">RRTStyleConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "plotter.RRTPlotter.style", "modulename": "plotter", "qualname": "RRTPlotter.style", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "plotter.RRTPlotter.base_circle", "modulename": "plotter", "qualname": "RRTPlotter.base_circle", "kind": "function", "doc": "<p>\u7ed8\u5236\u57fa\u7840\u5706\u5f62\u5143\u7d20\uff08\u65e0\u6807\u7b7e\uff09</p>\n\n<p>Args:\n    center (Tuple[float, float]): \u5706\u5fc3\u5750\u6807 (x, y)\n    **kwargs: \u53ef\u8986\u76d6\u7684\u6837\u5f0f\u53c2\u6570\uff08color, radius, alpha\uff09</p>\n\n<p>Returns:\n    Circle: \u521b\u5efa\u7684\u5706\u5f62Patch\u5bf9\u8c61</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>circle = plotter.base_circle((5,5), color='red', radius=0.3)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">center</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">Circle</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.base_arrow", "modulename": "plotter", "qualname": "RRTPlotter.base_arrow", "kind": "function", "doc": "<p>\u7ed8\u5236\u57fa\u7840\u7bad\u5934\u5143\u7d20\uff08\u65e0\u6807\u7b7e\uff09</p>\n\n<p>Args:\n    start (Tuple[float, float]): \u8d77\u70b9\u5750\u6807 (x, y)\n    end (Tuple[float, float]): \u7ec8\u70b9\u5750\u6807 (x, y)\n    **kwargs: \u53ef\u8986\u76d6\u7684\u6837\u5f0f\u53c2\u6570\uff08color, linewidth, arrowstyle\uff09</p>\n\n<p>Returns:\n    Annotation: \u521b\u5efa\u7684\u7bad\u5934Annotation\u5bf9\u8c61</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>arrow = plotter.base_arrow((0,0), (5,5), linewidth=2)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.base_obstacle", "modulename": "plotter", "qualname": "RRTPlotter.base_obstacle", "kind": "function", "doc": "<p>\u7ed8\u5236\u57fa\u7840\u591a\u8fb9\u5f62\u969c\u788d\u7269\uff08\u65e0\u6807\u7b7e\uff09</p>\n\n<p>Args:\n    vertices (np.ndarray): \u591a\u8fb9\u5f62\u9876\u70b9\u5750\u6807\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N,2)\n    **kwargs: \u53ef\u8986\u76d6\u7684\u6837\u5f0f\u53c2\u6570\uff08color, alpha\uff09</p>\n\n<p>Returns:\n    Polygon: \u521b\u5efa\u7684\u591a\u8fb9\u5f62Patch\u5bf9\u8c61</p>\n\n<p>Note:\n    \u4f1a\u81ea\u52a8\u95ed\u5408\u672a\u95ed\u5408\u7684\u591a\u8fb9\u5f62\u9876\u70b9</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>vertices = np.array([[0,0], [2,0], [1,1]])\n      obstacle = plotter.base_obstacle(vertices, color='gray')</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vertices</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">Polygon</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.add_line", "modulename": "plotter", "qualname": "RRTPlotter.add_line", "kind": "function", "doc": "<p>\u7ed8\u5236\u8f85\u52a9\u7ebf\u6bb5</p>\n\n<p>Args:\n    start (Tuple[float, float]): \u8d77\u70b9\u5750\u6807 (x, y)\n    end (Tuple[float, float]): \u7ec8\u70b9\u5750\u6807 (x, y)\n    **kwargs: \u53ef\u8986\u76d6\u7684\u6837\u5f0f\u53c2\u6570\uff1a\n        - color: \u7ebf\u6761\u989c\u8272\n        - linewidth: \u7ebf\u5bbd\n        - linestyle: \u7ebf\u578b\uff08\u5982'--'\u8868\u793a\u865a\u7ebf\uff09\n        - alpha: \u900f\u660e\u5ea6</p>\n\n<p>Returns:\n    plt.Line2D: \u521b\u5efa\u7684\u7ebf\u6bb5\u5bf9\u8c61</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>line = plotter.add_line((0,0), (5,5), linestyle='--', color='#999')</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.add_circle_node", "modulename": "plotter", "qualname": "RRTPlotter.add_circle_node", "kind": "function", "doc": "<p>\u6dfb\u52a0\u5e26\u81ea\u52a8\u7f16\u53f7\u7684\u5706\u5f62\u8282\u70b9</p>\n\n<p>Args:\n    center (Tuple[float, float]): \u5706\u5fc3\u5750\u6807 (x, y)\n    label (Optional[str]): \u81ea\u5b9a\u4e49\u6807\u7b7e\u6587\u672c\uff0c\u9ed8\u8ba4\u81ea\u52a8\u7f16\u53f7\n    label_visible (bool): \u662f\u5426\u663e\u793a\u6807\u7b7e\uff0c\u9ed8\u8ba4False\n    **kwargs: \u8282\u70b9\u6837\u5f0f\u53c2\u6570\uff08\u7ee7\u627f\u81eabase_circle\uff09</p>\n\n<p>Returns:\n    Tuple[Circle, Optional[Annotation]]:\n        \u5706\u5f62\u8282\u70b9\u5bf9\u8c61\u548c\u6587\u672c\u6807\u7b7e\u5bf9\u8c61\uff08\u5f53label_visible\u4e3aTrue\u65f6\u975e\u7a7a\uff09</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>node, label = plotter.add_circle_node((2,3), label_visible=True)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">label_visible</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">Circle</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.add_edge", "modulename": "plotter", "qualname": "RRTPlotter.add_edge", "kind": "function", "doc": "<p>\u6dfb\u52a0\u5e26\u81ea\u52a8\u7f16\u53f7\u7684\u7bad\u5934\u8fde\u63a5</p>\n\n<p>Args:\n    start (Tuple[float, float]): \u8d77\u70b9\u5750\u6807 (x, y)\n    end (Tuple[float, float]): \u7ec8\u70b9\u5750\u6807 (x, y)\n    label (Optional[str]): \u81ea\u5b9a\u4e49\u6807\u7b7e\u6587\u672c\uff0c\u9ed8\u8ba4\u81ea\u52a8\u751f\u6210\u5e8f\u53f7\n    label_visible (bool): \u662f\u5426\u663e\u793a\u8fb9\u6807\u7b7e\uff0c\u9ed8\u8ba4False\n    **kwargs: \u7bad\u5934\u6837\u5f0f\u53c2\u6570\uff0c\u53ef\u8986\u76d6\uff1a\n        - color: \u7bad\u5934\u989c\u8272\n        - linewidth: \u7ebf\u5bbd\n        - arrowstyle: \u7bad\u5934\u6837\u5f0f\n        - mutation_scale: \u7bad\u5934\u5927\u5c0f</p>\n\n<p>Returns:\n    Tuple[Annotation, Optional[Annotation]]:\n        (\u7bad\u5934\u5bf9\u8c61, \u6587\u672c\u6807\u7b7e\u5bf9\u8c61) \u5143\u7ec4\uff0c\u5f53label_visible=False\u65f6\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3aNone</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>arrow, label = plotter.add_edge((0,0), (5,5),\n                                     color='blue',\n                                     label_visible=True)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">label_visible</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.add_labeled_obstacle", "modulename": "plotter", "qualname": "RRTPlotter.add_labeled_obstacle", "kind": "function", "doc": "<p>\u6dfb\u52a0\u5e26\u6807\u7b7e\u7f16\u53f7\u7684\u969c\u788d\u7269\u591a\u8fb9\u5f62</p>\n\n<p>Args:\n    vertices (np.ndarray): \u969c\u788d\u7269\u9876\u70b9\u5750\u6807\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N,2)\n    label (Optional[str]): \u81ea\u5b9a\u4e49\u6807\u7b7e\u6587\u672c\uff0c\u9ed8\u8ba4\u81ea\u52a8\u7f16\u53f7\n    label_visible (bool): \u662f\u5426\u663e\u793a\u6807\u7b7e\uff0c\u9ed8\u8ba4False\n    **kwargs: \u969c\u788d\u7269\u6837\u5f0f\u53c2\u6570\uff08\u7ee7\u627f\u81eabase_obstacle\uff09</p>\n\n<p>Returns:\n    Tuple[Polygon, Optional[Annotation]]:\n        \u969c\u788d\u7269\u591a\u8fb9\u5f62\u5bf9\u8c61\u548c\u6587\u672c\u6807\u7b7e\u5bf9\u8c61\uff08\u5f53label_visible\u4e3aTrue\u65f6\u975e\u7a7a\uff09</p>\n\n<p>Raises:\n    ValueError: \u5f53\u9876\u70b9\u6570\u5c0f\u4e8e3\u65f6\u53ef\u80fd\u629b\u51fa\u5f02\u5e38</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>vertices = np.array([[0,0], [1,0], [1,1]])\n      obstacle, label = plotter.add_labeled_obstacle(vertices)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">vertices</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">label_visible</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.connect_nodes", "modulename": "plotter", "qualname": "RRTPlotter.connect_nodes", "kind": "function", "doc": "<p>\u8fde\u63a5\u4e24\u4e2aRRT\u8282\u70b9\u5e76\u7ed8\u5236\u7bad\u5934</p>\n\n<p>Args:\n    start_node (Circle): \u8d77\u59cb\u8282\u70b9\u5bf9\u8c61\n    end_node (Circle): \u7ec8\u6b62\u8282\u70b9\u5bf9\u8c61\n    **kwargs: \u7bad\u5934\u6837\u5f0f\u53c2\u6570</p>\n\n<p>Returns:\n    Tuple[Annotation, Optional[Annotation]]: (\u7bad\u5934\u5bf9\u8c61, \u6807\u7b7e\u6587\u672c\u5bf9\u8c61)</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>node1 = plotter.add_circle_node((0,0))\n      node2 = plotter.add_circle_node((5,5))\n      arrow, text = plotter.connect_nodes(node1, node2)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start_node</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">Circle</span>,</span><span class=\"param\">\t<span class=\"n\">end_node</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">Circle</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.add_path_segment", "modulename": "plotter", "qualname": "RRTPlotter.add_path_segment", "kind": "function", "doc": "<p>\u6dfb\u52a0\u5e26\u672b\u7aef\u8282\u70b9\u7684\u5b8c\u6574\u8def\u5f84\u6bb5</p>\n\n<p>Args:\n    start (Tuple[float, float]): \u8def\u5f84\u8d77\u70b9\u5750\u6807 (x, y)\n    angle (float): \u6269\u5c55\u65b9\u5411\u89d2\u5ea6\uff08\u5355\u4f4d\uff1a\u5f27\u5ea6\uff09\n    length (float): \u8def\u5f84\u603b\u957f\u5ea6\uff08\u81ea\u52a8\u6263\u9664\u672b\u7aef\u8282\u70b9\u534a\u5f84\uff09\n    **kwargs: \u8def\u5f84\u6837\u5f0f\u53c2\u6570\uff0c\u5305\u62ec\uff1a\n        - radius: \u672b\u7aef\u8282\u70b9\u534a\u5f84\uff08\u9ed8\u8ba4\u4f7f\u7528\u5168\u5c40\u914d\u7f6e\uff09\n        - \u5176\u4ed6\u7bad\u5934/\u8282\u70b9\u6837\u5f0f\u53c2\u6570</p>\n\n<p>Returns:\n    Dict[str, Any]: \u5305\u542b\u4ee5\u4e0b\u952e\u7684\u5b57\u5178\uff1a\n        - 'arrow': \u8def\u5f84\u7bad\u5934\u5bf9\u8c61\n        - 'arrow_text': \u7bad\u5934\u6807\u7b7e\u5bf9\u8c61\n        - 'node': \u672b\u7aef\u8282\u70b9\u5bf9\u8c61\n        - 'node_text': \u8282\u70b9\u6807\u7b7e\u5bf9\u8c61</p>\n\n<p>Note:\n    \u5b9e\u9645\u8def\u5f84\u957f\u5ea6 = length - \u672b\u7aef\u8282\u70b9\u534a\u5f84</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>path = plotter.add_path_segment((2,3), np.pi/4, 5,\n                                      radius=0.3,\n                                      color='green')</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.radial_extension", "modulename": "plotter", "qualname": "RRTPlotter.radial_extension", "kind": "function", "doc": "<p>\u4ece\u73b0\u6709\u8282\u70b9\u6cbf\u6307\u5b9a\u89d2\u5ea6\u65b9\u5411\u6269\u5c55\u8def\u5f84\u6bb5</p>\n\n<p>Args:\n    base_node (Circle): \u57fa\u51c6\u8282\u70b9\u5bf9\u8c61\n    direction_angle (float): \u6269\u5c55\u65b9\u5411\u89d2\u5ea6\uff08\u5355\u4f4d\uff1a\u5ea6\uff09\n    length (float): \u6269\u5c55\u603b\u957f\u5ea6\uff08\u9700\u5927\u4e8e\u8282\u70b9\u534a\u5f84\uff09\n    **kwargs: \u8def\u5f84\u6bb5\u6837\u5f0f\u53c2\u6570</p>\n\n<p>Returns:\n    Annotation: \u5305\u542b\u8def\u5f84\u6bb5\u5143\u7d20\u7684\u5b57\u5178</p>\n\n<p>Raises:\n    ValueError: \u5f53\u6269\u5c55\u957f\u5ea6\u5c0f\u4e8e\u8282\u70b9\u534a\u5f84\u65f6\u629b\u51fa</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>node = plotter.add_circle_node((2,3))\n      path = plotter.radial_extension(node, 45, 5)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">base_node</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">Circle</span>,</span><span class=\"param\">\t<span class=\"n\">direction_angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.inward_connection", "modulename": "plotter", "qualname": "RRTPlotter.inward_connection", "kind": "function", "doc": "<p>\u521b\u5efa\u6307\u5411\u76ee\u6807\u8282\u70b9\u7684\u5916\u90e8\u8fde\u63a5\u8fb9</p>\n\n<p>Args:\n    target_node (Circle): \u76ee\u6807\u8282\u70b9\u5bf9\u8c61\n    direction_angle (float): \u8fde\u63a5\u65b9\u5411\u89d2\u5ea6\uff08\u5355\u4f4d\uff1a\u5ea6\uff09\n    length (float): \u8fde\u63a5\u8fb9\u603b\u957f\u5ea6\uff08\u9700\u5927\u4e8e\u8282\u70b9\u534a\u5f84\uff09\n    **kwargs: \u7bad\u5934\u6837\u5f0f\u53c2\u6570</p>\n\n<p>Returns:\n    Dict[str, Any]: \u5305\u542b\u7bad\u5934\u8981\u7d20\u7684\u5b57\u5178\uff0c\u5305\u542b\u4ee5\u4e0b\u952e\uff1a\n        - arrow: \u7bad\u5934\u5bf9\u8c61\n        - arrow_text: \u6807\u7b7e\u5bf9\u8c61\n        - start_point: \u8d77\u70b9\u5750\u6807\n        - end_point: \u7ec8\u70b9\u5750\u6807</p>\n\n<p>Raises:\n    ValueError: \u5f53\u957f\u5ea6\u5c0f\u4e8e\u8282\u70b9\u534a\u5f84\u65f6\u629b\u51fa</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>target = plotter.add_circle_node((5,5))\n      conn = plotter.inward_connection(target, 30, 6)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target_node</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">patches</span><span class=\"o\">.</span><span class=\"n\">Circle</span>,</span><span class=\"param\">\t<span class=\"n\">direction_angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.add_angle_annotation", "modulename": "plotter", "qualname": "RRTPlotter.add_angle_annotation", "kind": "function", "doc": "<p>\u6807\u6ce8\u4e24\u6709\u5411\u8fb9\u4e4b\u95f4\u7684\u5939\u89d2</p>\n\n<p>Args:\n    edge1 (Annotation): \u7b2c\u4e00\u6761\u8fb9\u7684Annotation\u5bf9\u8c61\n    edge2 (Annotation): \u7b2c\u4e8c\u6761\u8fb9\u7684Annotation\u5bf9\u8c61\n    label (Optional[str]): \u81ea\u5b9a\u4e49\u6807\u7b7e\u6587\u672c\uff0c\u9ed8\u8ba4\u663e\u793a\u89d2\u5ea6\u503c\n    **kwargs: \u89d2\u5ea6\u6807\u6ce8\u6837\u5f0f\u53c2\u6570</p>\n\n<p>Returns:\n    Dict[str, Any]: \u5305\u542b\u4ee5\u4e0b\u5143\u7d20\u7684\u5b57\u5178\uff1a\n        - arc: \u5706\u5f27\u5bf9\u8c61\n        - text: \u6807\u7b7e\u6587\u672c\u5bf9\u8c61\n        - extend_arrows: \u5ef6\u957f\u7ebf\u5bf9\u8c61\u5217\u8868\n        - intersection: \u4ea4\u70b9\u5750\u6807</p>\n\n<p>Note:\n    \u5f53\u4e24\u76f4\u7ebf\u5e73\u884c\u6216\u91cd\u5408\u65f6\u8fd4\u56deNone</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>edge1 = plotter.add_edge((0,0), (5,0))\n      edge2 = plotter.add_edge((0,0), (0,5))\n      angle_anno = plotter.add_angle_annotation(edge1, edge2)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">edge1</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span>,</span><span class=\"param\">\t<span class=\"n\">edge2</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.draw_rrt_tree", "modulename": "plotter", "qualname": "RRTPlotter.draw_rrt_tree", "kind": "function", "doc": "<p>\u81ea\u52a8\u7ed8\u5236RRT\u6811\u7ed3\u6784</p>\n\n<p>Args:\n    tree (Any): \u6811\u7ed3\u6784\u6570\u636e\uff0c\u7c7b\u578b\u53d6\u51b3\u4e8etree_type\u53c2\u6570\n    tree_type (str): \u6811\u7ed3\u6784\u7c7b\u578b\uff0c\u53ef\u9009\uff1a\n        'classic' - \u7ecf\u5178\u6811\u7ed3\u6784\uff08\u9700\u5305\u542bparent/position\u5c5e\u6027\uff09\n        'networkx' - NetworkX\u7684Graph\u5bf9\u8c61\uff08\u5f85\u8c03\u8bd5\u4e0e\u6d4b\u8bd5\uff09\n        'ompl' - OMPL\u5e93\u7684RRT\u6811\u7ed3\u6784\uff08\u5f85\u8c03\u8bd5\u4e0e\u6d4b\u8bd5\uff09\n    start_angle (float): \u6839\u8282\u70b9\u8d77\u59cb\u89d2\u5ea6\uff08\u5f27\u5ea6\uff09\uff0c\u9ed8\u8ba4None\n    start_length (float): \u6839\u8282\u70b9\u8d77\u59cb\u957f\u5ea6\uff0c\u9ed8\u8ba41\n    node_label (bool): \u662f\u5426\u663e\u793a\u8282\u70b9\u7f16\u53f7\uff0c\u9ed8\u8ba4False\n    edge_label (bool): \u662f\u5426\u663e\u793a\u8fb9\u7f16\u53f7\uff0c\u9ed8\u8ba4False\n    **kwargs: \u6837\u5f0f\u8986\u76d6\u53c2\u6570\uff08node_color, edge_color\u7b49\uff09</p>\n\n<p>Returns:\n    Dict[str, Any]: \u5305\u542b\u6240\u6709\u7ed8\u56fe\u5143\u7d20\u7684\u5b57\u5178\uff0c\u952e\u4e3a'nodes'\u548c'edges'</p>\n\n<p>Raises:\n    ValueError: \u5f53\u4f20\u5165\u4e0d\u652f\u6301\u7684tree_type\u65f6\u629b\u51fa</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>elements = plotter.draw_rrt_tree(tree, node_label=True)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tree</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">tree_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;classic&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">start_angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_length</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">node_label</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">edge_label</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.add_annotation", "modulename": "plotter", "qualname": "RRTPlotter.add_annotation", "kind": "function", "doc": "<p>\u6dfb\u52a0\u81ea\u7531\u6587\u672c\u6807\u6ce8</p>\n\n<p>Args:\n    position (Tuple[float, float]): \u6587\u672c\u951a\u70b9\u5750\u6807 (x, y)\n    text (str): \u6807\u6ce8\u6587\u672c\u5185\u5bb9\n    **kwargs: \u6587\u672c\u6837\u5f0f\u53c2\u6570\uff0c\u53ef\u8986\u76d6\uff1a\n        - color: \u6587\u672c\u989c\u8272\n        - fontsize: \u5b57\u53f7\n        - fontweight: \u5b57\u91cd\uff08\u5982'bold'\uff09\n        - ha/va: \u6c34\u5e73/\u5782\u76f4\u5bf9\u9f50\u65b9\u5f0f</p>\n\n<p>Returns:\n    Annotation: \u521b\u5efa\u7684\u6587\u672c\u6807\u6ce8\u5bf9\u8c61</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>anno = plotter.add_annotation((5,5), \"\u91cd\u8981\u8282\u70b9\",\n                                   fontsize=18,\n                                   color='red',\n                                   ha='center')</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span>:</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.show", "modulename": "plotter", "qualname": "RRTPlotter.show", "kind": "function", "doc": "<p>\u663e\u793a\u53ef\u89c6\u5316\u7a97\u53e3</p>\n\n<p>Note:\n    \u963b\u585e\u5f0f\u65b9\u6cd5\uff0c\u4f1a\u6682\u505c\u7a0b\u5e8f\u6267\u884c\u76f4\u5230\u5173\u95ed\u7a97\u53e3\n    \u5efa\u8bae\u5728\u6240\u6709\u7ed8\u56fe\u64cd\u4f5c\u5b8c\u6210\u540e\u8c03\u7528</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.save", "modulename": "plotter", "qualname": "RRTPlotter.save", "kind": "function", "doc": "<p>\u4fdd\u5b58\u5f53\u524d\u53ef\u89c6\u5316\u7ed3\u679c\u5230\u6587\u4ef6</p>\n\n<p>Args:\n    filename (str): \u4fdd\u5b58\u8def\u5f84\uff08\u652f\u6301\u683c\u5f0f\uff1apng/jpg/pdf/svg\u7b49\uff09\n    dpi (int): \u8f93\u51fa\u5206\u8fa8\u7387\uff08\u6bcf\u82f1\u5bf8\u70b9\u6570\uff09\uff0c\u9ed8\u8ba4300</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>plotter.save('rrt_tree.png', dpi=600)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dpi</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "plotter.RRTPlotter.calculate_segment_relations", "modulename": "plotter", "qualname": "RRTPlotter.calculate_segment_relations", "kind": "function", "doc": "<p>\u8ba1\u7b97\u7ebf\u6bb5\u7a7a\u95f4\u5173\u7cfb\uff08\u51e0\u4f55\u6838\u5fc3\u65b9\u6cd5\uff09</p>\n\n<p>Algorithm:\n    1. \u8ba1\u7b97\u65e0\u9650\u957f\u76f4\u7ebf\u4ea4\u70b9\n    2. \u8ba1\u7b97\u7b26\u53f7\u8ddd\u79bb\u5224\u65ad\u76f8\u5bf9\u4f4d\u7f6e\n    3. \u8ba1\u7b97\u6709\u5411\u89d2\u5ea6\u5dee</p>\n\n<p>Returns:\n    tuple: \u5305\u542b\u4e09\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\uff1a\n        0: \u4ea4\u70b9\u5750\u6807 (x,y) \u6216 None\n        1: (\u5230\u7ebf\u6bb51\u7684\u7b26\u53f7\u8ddd\u79bb, \u5230\u7ebf\u6bb52\u7684\u7b26\u53f7\u8ddd\u79bb)\n        2: \u4ece\u7ebf\u6bb51\u5230\u7ebf\u6bb52\u7684\u65cb\u8f6c\u89d2\u5ea6\uff08\u5f27\u5ea6\uff09</p>\n\n<p>Note:\n    \u7b26\u53f7\u8ddd\u79bb\u8bf4\u660e\uff1a\u8d1f\u503c\u8868\u793a\u5728\u8d77\u70b9\u5ef6\u957f\u7ebf\u65b9\u5411\uff0c\u6b63\u503c\u8868\u793a\u5728\u7ec8\u70b9\u5ef6\u957f\u7ebf\u65b9\u5411</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">edge1</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span>,</span><span class=\"param\">\t<span class=\"n\">edge2</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Annotation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();